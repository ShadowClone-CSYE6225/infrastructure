# This CloudFormation template deploys a basic VPC / Network.
Parameters:

  SubnetCidrBlocks: 
    Description: "List of CIDR blocks"
    Type: CommaDelimitedList
    Default: "10.0.1.0/24, 10.0.2.0/24, 10.0.3.0/24, 10.0.4.0/24, 10.0.5.0/24, 10.0.6.0/24"
  
  KeyName:
    Description: "Key Pair "
    Type: String
    Default: testKey
  
  PGUSER:
    Description: "Postgres username"
    Type: String
    Default: csye6225

  PGPASSWORD:
    Description: "Postgres password"
    Type: String
    Default: adminPratik1234
  
  PGDATABASE:
    Description: "Postgres database"
    Type: String
    Default: csye6225

  amiImageId:
    Description: "AMI image id"
    Type: String


  NumberOfAZs:
    Type: Number
    AllowedValues:
    - 1
    - 2
    - 3
    Default: 3
    Description:  How many Availability Zones do you wish to utilize?

Conditions:
    BuildPublicB:         !Not [ !Equals [ !Ref NumberOfAZs, 1 ]] 
    BuildPublicC:         !Equals [ !Ref NumberOfAZs, 3 ] 

Resources:
  # First, a VPC:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
   # Our VPC will need internet access:     
  
  
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC


  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    # Notice how you can't attach an IGW to a VPC unless both are created:
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Ref SubnetCidrBlocks]
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list       
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: PUBLICSUBNETA
      - Key: VPC Name
        Value: !Ref AWS::StackName
  
  
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Condition: BuildPublicB
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Ref SubnetCidrBlocks]
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the first AZ in the list       
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: PUBLICSUBNETB
      - Key: VPC Name
        Value: !Ref AWS::StackName
  
  
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Condition: BuildPublicC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Ref SubnetCidrBlocks]
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the first AZ in the list       
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: PUBLICSUBNETC
      - Key: VPC Name
        Value: !Ref AWS::StackName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [3, !Ref SubnetCidrBlocks]
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]    # Get the first AZ in the list       
      Tags:
      - Key: Name
        Value: PrivateSubnet1
      - Key: VPC Name
        Value: !Ref AWS::StackName
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [4, !Ref SubnetCidrBlocks]
      AvailabilityZone: !Select [ 1, !GetAZs ]    # Get the first AZ in the list       
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnet2
      - Key: VPC Name
        Value: !Ref AWS::StackName
  
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    DependsOn: VPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [5, !Ref SubnetCidrBlocks]
      AvailabilityZone: !Select [ 2, !GetAZs ]    # Get the first AZ in the list       
      Tags:
      - Key: Name
        Value: PrivateSubnet3
      - Key: VPC Name
        Value: !Ref AWS::StackName
    
    # Some route tables for our subnets:
  
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: RouteTable
      - Key: VPC Name
        Value: !Ref AWS::StackName
  
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: VPC
      Tags:
      - Key: Name
        Value:  PrivateRouteTableName
      - Key: VPC Name
        Value: !Ref AWS::StackName

  
  
  PublicRoute1:   # Public route table has direct routing to IGW:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  

        
  # Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   
  
  
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  # Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   
  
  
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicB
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable


  # Attach the public subnets to public route tables,
  # and attach the private subnets to private route tables:   
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: BuildPublicC
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnet3
      RouteTableId: !Ref PrivateRouteTable
  
  WebAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref amiImageId  
      InstanceType: t2.micro
      KeyName: !Ref KeyName
      NetworkInterfaces:
         - AssociatePublicIpAddress: "true"
           DeleteOnTermination: "true"
           DeviceIndex: "0"
           SubnetId: !Ref PublicSubnetB
           GroupSet: 
           -  !Ref WebAppSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/sdc
          Ebs:
            VolumeSize: 50
            VolumeType: gp2
            DeleteOnTermination: true
      IamInstanceProfile: !Ref IAMInstanceProfile
      UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash
               echo export PGHOST=\'${MyDBInstance.Endpoint.Address}\' >> /etc/profile
               echo export PORT=6969 >> /etc/profile
               echo export PGUSER=\'${PGUSER}\' >> /etc/profile
               echo export PGPASSWORD=\'${PGPASSWORD}\' >> /etc/profile
               echo export PGDATABASE=\'${PGDATABASE}\' >> /etc/profile
               echo export S3BUCKET=\'${S3bucket}\' >> /etc/profile
               echo export AWS_REGION=\'us-east-2\' >> /etc/profile
              sleep 20
              source /etc/profile
              cd /home/ubuntu/Application/webapp
              rm -rf node_modules
              sudo npm install
              source /etc/profile
              pm2 start ./Models/document.js
              pm2 start ./Models/user.js
              pm2 start index.js --update-env
              pm2 startup systemd
              pm2 save
              pm2 list


  IAMRole:
    Type: 'AWS::IAM::Role' 
    Properties:
      RoleName: EC2-CSYE6225
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /


  IAMInstanceProfile: 
    Type: 'AWS::IAM::InstanceProfile'
    Properties: 
      Path: /
      Roles: 
        - Ref: IAMRole
  
  WebAppS3Policy:
    Type: 'AWS::IAM::Policy'
    Properties:
        PolicyName: WebAppS3
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:PutObject'
              - 's3:DeleteObject'
              - 's3:ListBucket'
            Resource: 
              -  !Join ["",["arn:aws:s3:::", !Ref S3bucket]]
              -  !Join ["",["arn:aws:s3:::", !Ref S3bucket,"/*"]]
        Roles: 
          - !Ref IAMRole



  WebAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [webapp-security-group, dev]]
      GroupDescription: "Allow HTTP/HTTPS and SSH inbound and outbound traffic"
      VpcId:
          Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 6969
          ToPort: 6969
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3200
          ToPort: 3200
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: ApplicationSecurityGroup

  

  RDSPrivateSubnetGroup:
      Type : AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: private subnet group for RDS
        DBSubnetGroupName: RDS Subnet Group
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3

  DatabaseSecurityGroupFinal:
    DependsOn:
      - PrivateSubnet1
      - PrivateSubnet2
      - PrivateSubnet3
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "postgresDatabase to delete"
      GroupName: database
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt WebAppSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: Rds-Security-Group

  MyDBInstance:
    Type: "AWS::RDS::DBInstance"
    DeletionPolicy: Delete
    Properties:
      DBInstanceIdentifier: csye6225
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      PubliclyAccessible: false
      Port: 5432
      DBName: !Ref PGDATABASE
      Engine: postgres
      MasterUsername: !Ref PGUSER
      MasterUserPassword: !Ref PGPASSWORD
      StorageType: gp2
      VPCSecurityGroups: 
        - Ref: DatabaseSecurityGroupFinal
      DBSubnetGroupName: 
        Ref: RDSPrivateSubnetGroup
      Tags:
        - Key: Name
          Value: Rds-Postgres-Instance


  #S3 Bucket creation
  S3bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: Private
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

      LifecycleConfiguration:
        Rules:
          - Id: Rule for S3 bucket
            Prefix: S3 Documents
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
  

  DNSHost:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: dev.pratiktalreja.me.
      Name: dev.pratiktalreja.me.
      Type: A
      TTL: 900
      ResourceRecords:
      - !GetAtt WebAppInstance.PublicIp
